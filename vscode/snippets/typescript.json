{
  // Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Create slice": {
    "prefix": "cre-slice",
    "body": [
      "import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'",
      "import { RootState, AppThunk } from '../../app/store'",
      "",
      "const initialState = {",
      "  value: 0,",
      "  status: 'idle',",
      "}",
      "",
      "export const incrementAsync = createAsyncThunk(",
      "  '$1/fetchCount',",
      "  async (input: number) => {",
      "    const response: number = await new Promise((resolve) => resolve(input))",
      "    return response",
      "  }",
      ")",
      "export const $1Slice = createSlice({",
      "  name: '$1',",
      "  initialState,",
      "  reducers: {",
      "    increment: (state) => {",
      "      state.value += 1",
      "    },",
      "    incrementByAmount: (state, action: PayloadAction<number>) => {",
      "      state.value += action.payload",
      "    },",
      "  },",
      "  extraReducers: (builder) => {",
      "    builder",
      "      .addCase(incrementAsync.pending, (state) => {",
      "        state.status = 'loading'",
      "      })",
      "      .addCase(incrementAsync.fulfilled, (state, action) => {",
      "        state.status = 'idle'",
      "        state.value += action.payload",
      "      })",
      "  },",
      "})",
      "",
      "export const { increment, incrementByAmount } = $1Slice.actions",
      "export const selectCount = (state: RootState) => state.$1.value",
      "export default $1Slice.reducer"
    ],
    "description": "Log output to console"
  }
}
