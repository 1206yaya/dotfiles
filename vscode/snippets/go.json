{
    // builtin snippet : https://github.com/microsoft/vscode-go/blob/master/snippets/go.json
    // 良いスニペット例:
    //   https://github.com/doggy8088/go-extension-pack/blob/8a6c2a6382d12a49ca5e007011d3184f233ddf0f/snippets/go.json#L261
    // スニペット作成補助: https://snippet-generator.app/?description=&tabtrigger=&snippet=&mode=vscode
    //
    // Snippet 定義方法:
    // - prefix: スニペットを呼び出すトリガー
    // - body: 展開内容（配列または文字列）
    // - description: 説明（任意）
    //
    // 変数: $1, $2, ... でタブ移動位置を指定。$0 は最終カーソル位置。
    // 同じ ID を持つプレースホルダは連動します。

    "main function": {
        "prefix": "mainf",
        "body": [
            "package main",
            "",
            "import \"fmt\"",
            "",
            "func main() {",
            "\t$0",
            "}",
            ""
        ],
        "description": "Basic main function template"
    },

    "continue": {
        "prefix": "cont",
        "body": "continue"
    },

    "return": {
        "prefix": "return",
        "body": "return $1"
    },

    "else if statement": {
        "prefix": "elif",
        "body": [
            "else if $1 {",
            "\t$2",
            "}"
        ]
    },

    "type int": {
        "prefix": "tint",
        "description": "Type int",
        "body": "type $1 int"
    },

    "insert :=": {
        "prefix": "v",
        "description": "Variable declaration :=",
        "body": " := "
    },

    "insert name := value": {
        "prefix": "vv",
        "description": "Variable declaration name := value",
        "body": "${1:name} := ${0:value}"
    },

    "log spew": {
        "prefix": "logs",
        "body": [
            "spew.Config = spew.ConfigState{",
            "  Indent:                  \"  \",",
            "  DisablePointerAddresses: true,",
            "  DisableCapacities:       true,",
            "  SortKeys:                true,",
            "}",
            "fmt.Println(\"${1:args} ---\")",
            "spew.Dump(${1:args})",
            "${0}"
        ],
        "description": "Setup spew config and dump a variable"
    },
    
    "fmt.Println()": {
        "prefix": "print",
        "body": "fmt.Println($1)",
        "description": "Snippet for fmt.Println()"
    },

    "fmt.Printf with selectable format": {
        "prefix": "printv",
        "body": [
            "fmt.Printf(\"${1:var}: ${2|%+v,%#+v|}\\n\", ${1:var})"
        ],
        "description": "fmt.Printf() with selectable %+v or %#v format"
    },

    "fmt.Sprintf basic format": {
        "prefix": "sprintf",
        "body": "fmt.Sprintf(\"${2|%d,%f,%s,%t|}\", ${1:value})",
        "description": "fmt.Sprintf() for int %d, float %f, string %s, bool %t"
    },

    "fmt.Sprintf variable format": {
        "prefix": "sprintv",
        "body": "fmt.Sprintf(\"${2|%+v,%#v|}\", ${1:var})",
        "description": "fmt.Sprintf with %+v or %#v format"
    },

    "iferr": {
        "prefix": "iferr",
        "body": [
            "if err != nil {",
            "    ${1|return,return err,return nil\\, err,log.Fatalf(\"Error %s\"\\, err.Error())|}",
            "}"
        ],
        "description": "Snippet for if err != nil with common patterns"
    },

    "Test Function": {
        "prefix": "testfunc",
        "body": [
            "func Test${1:FunctionName}(t *testing.T) {",
            "\t$0",
            "}"
        ],
        "description": "Generate a basic test function"
    },

    "Table driven test": {
        "prefix": "tdtest",
        "body": [
            "func Test${1:Name}(t *testing.T) {",
            "\ttests := []struct {",
            "\t\tname string",
            "\t\tinput ${2:type}",
            "\t\twant ${3:type}",
            "\t}{",
            "\t\t// {\"case1\", input, want},",
            "\t}",
            "\tfor _, tt := range tests {",
            "\t\tt.Run(tt.name, func(t *testing.T) {",
            "\t\t\tgot := ${4:funcUnderTest}(tt.input)",
            "\t\t\tif got != tt.want {",
            "\t\t\t\tt.Errorf(\"got %v, want %v\", got, tt.want)",
            "\t\t\t}",
            "\t\t})",
            "\t}",
            "}"
        ],
        "description": "テーブル駆動テストの雛形"
    },

    "make slice with len": {
        "prefix": "makeT",
        "body": [
        "${1:varName} := make([]${2:string}, 0, len(${3:es}))"
        ],
        "description": "Make a slice with preallocated len"
    },
    
    "Slice of int": {
        "prefix": "si",
        "body": [
        "[]int"
        ],
        "description": "Expand to []int"
    },
    "Slice of string": {
        "prefix": "ss",
        "body": [
        "[]string"
        ],
        "description": "Expand to []string"
    }

}
