{
    // builtin snippet : https://github.com/microsoft/vscode-go/blob/master/snippets/go.json
    // いい感じの snippet: https://github.com/doggy8088/go-extension-pack/blob/8a6c2a6382d12a49ca5e007011d3184f233ddf0f/snippets/go.json#L261
    // https://snippet-generator.app/?description=&tabtrigger=&snippet=&mode=vscode
    // Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "logs",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    // "main basic": {
    //     "prefix": "main",
    //     "body": [
    //         "package main",
    //         "",
    //         "import (",
    //         "\t\"fmt\"",
    //         ")",
    //         "",
    //         "func main() {",
    //         "\tfmt.Println(\"$1\")",
    //         "}"
    //     ],
    //     "description": "Main basic"
    // },
    "main function": {
        "prefix": "main",
        "body": [
            "package main",
            "",
            "import \"fmt\"",
            "",
            "func main() {",
            "   fmt.Println(\"Hello\")",
            "}",
            ""
        ],
        "description": ""
    },
    "continue ": {
        "prefix": "con",
        "body": "continue"
    },
    "return ": {
        "prefix": "re",
        "body": "return $1"
    },
    "else if statement": {
        "prefix": "elif",
        "body": [
            "else if $1 {",
            "\t\t$2",
            "\t}"
        ]
    },
    "type int": {
        "prefix": "ti",
        "description": "Type int",
        "body": "type $1 int"
    },
    "insert := ": {
        "prefix": "v",
        "description": "Variable declaration :=",
        "body": " := "
    },
    "insert name := value ": {
        "prefix": "vv",
        "description": "Variable declaration :=",
        "body": "${1:name} := ${0:value}"
    },
    "log spew": {
        "prefix": "logs",
        "body": [
            "spew.Config = spew.ConfigState{",
            "  Indent:                  \"  \",",
            "  DisablePointerAddresses: true,",
            "  DisableCapacities:       true,",
            "  SortKeys:                true,",
            "}",
            "fmt.Println(\"${1:args} ---\")",
            "spew.Dump(${1:args})",
            "${0}"
        ],
        "description": "Setup spew config and dump a variable"
    },
    "fmt.Printf 構造体": {
        "prefix": "fmts",
        "body": [
            "fmt.Printf(\"${1:args} --- %#v\\n\", ${1:args})",
            "${0}"
        ],
        "description": "Simple Printf Snippet"
    },
    "Sprintf": {
        "prefix": "fs",
        "body": [
            "fmt.Sprintf(\"${1:verbs}\", ${2:args})",
            "${0}"
        ],
        "description": "Simple Sprintf Snippet"
    },
    "iferr": {
        "prefix": "iferr",
        "body": [
            "if err != nil {",
            "    ${1|return,return err,return nil\\, err,log.Fatalf(\"Error %s\"\\, err.Error())|}",
            "}"
        ],
        "description": "Snippet for if err != nil with common usage scenario"
    },
    "Test Function": {
        "prefix": "testfunc",
        "body": [
            "func Test${1:FunctionName}(t *testing.T) {",
            "\t$0",
            "}"
        ],
        "description": "Generate a Test function"
    },
    "max": {
        "prefix": "max",
        "body": [
            "func max[T constraints.Ordered](a T, b T) T {",
            "\tif a > b {",
            "\t\treturn a",
            "\t}",
            "\treturn b",
            "}"
        ]
    },
    "max list function": {
        "prefix": "maxlist",
        "body": [
            "func maxList[T constraints.Ordered](x T, others ...T) T {",
            "\t res := x",
            "\t for _, y := range others {",
            "\t\t\t if y > res {",
            "\t\t\t\t\t res = y",
            "\t\t\t }",
            "\t }",
            "\t return res",
            "}"
        ]
    },
    "min function": {
        "prefix": "min",
        "body": [
            "func min[T constraints.Ordered](a T, b T) T {",
            "\tif a < b {",
            "\t\treturn a",
            "\t}",
            "\treturn b",
            "}"
        ]
    },
    "min list function": {
        "prefix": "minlist",
        "body": [
            "func minList[T constraints.Ordered](x T, others ...T) T {",
            "  res := x",
            "  for _, y := range others {",
            "   if y < res {",
            "    res = y",
            "   }",
            "  }",
            "  return res",
            "}"
        ],
        "description": ""
    },
    "sum function": {
        "prefix": "sum",
        "body": [
            "func sum[T constraints.Ordered](values []T) (sum T) {",
            "\tfor _, v := range values {",
            "\t\tsum += v",
            "\t}",
            "\treturn sum",
            "}",
            ""
        ]
    },
    "sum map": {
        "prefix": "summap",
        "body": [
            "func sumMap[T any, R constraints.Ordered](list []T, selector func(T) R) (sum R) {",
            "\tfor _, v := range list {",
            "\t\tsum += selector(v)",
            "\t}",
            "\treturn sum",
            "}",
            "// ex. ",
            "// numbers := []int{1, 2, 3, 4, 5}",
            "// sum := SumMap(numbers, func(n int) int {",
            "//\t\t return n",
            "// })",
            "//",
            "// products := []Product{",
            "// \t{\"Apple\", 1.99},",
            "// \t{\"Banana\", 0.99},",
            "// \t{\"Orange\", 2.49},",
            "// }",
            "// totalPrice := SumMap(products, func(p Product) float64 {",
            "// \treturn p.Price",
            "// })"
        ]
    },
    "abs function": {
        "prefix": "abs",
        "body": [
            "func abs[T constraints.Integer | constraints.Float](a T) T {",
            "\tif a >= 0 {",
            "\t\treturn a",
            "\t}",
            "\treturn -a",
            "}"
        ]
    },
    "reverse string function": {
        "prefix": "reverseString",
        "body": [
            "func reverseString(s string) string {",
            "    runes := []rune(s)",
            "    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {",
            "        runes[i], runes[j] = runes[j], runes[i]",
            "    }",
            "    return string(runes)",
            "}"
        ],
        "description": ""
    },
    "Yes No Answer function": {
        "prefix": "yn",
        "body": [
            "func yn(c bool) {",
            "    if c {",
            "        println(\"YES\")",
            "    } else {",
            "        println(\"NO\")",
            "    }",
            "}",
            ""
        ],
        "description": ""
    },
    "main run Fscan": {
        "prefix": "mainrunscan",
        "body": [
            "package main",
            "func run(in io.Reader, w io.Writer) {",
            "   out := bufio.NewWriter(w)",
            "   defer out.Flush()",
            "   var a, b, c int",
            "   fmt.Fscan(in, &a, &b, &c)",
            "   var N int",
            "   fmt.Fscan(in, &N)",
            "",
            "}",
            "",
            "func main() {",
            "   run(bufio.NewReader(os.Stdin), os.Stdout)",
            "}",
            ""
        ],
        "description": ""
    }
}