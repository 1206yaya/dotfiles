{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "props-interface": {
    "prefix": "create-props",
    "body": [
      "import { VFC, memo } from 'react'",
      "interface Props {",
      "  visible: boolean",
      "}",
      "const _$1: VFC<Props> = ({ visible }) => {",
      "  return <>$2</>",
      "}",
      "export const $1 = memo(_$1)",
      ""
    ]
  },
  "create-vfc": {
    "prefix": "create-vfc",
    "body": [
      "import { VFC, memo } from 'react';",
      "const _$1: VFC = () => {",
      "  return (<>$2</>)",
      "}",
      "export const $1 = memo(_$1)"
    ]
  },
  "map-item": {
    "prefix": "map-item",
    "body": [
      "{items?.map((item) => {",
      "  <div key={item.id}>",
      "    <ul></ul>",
      "  </div>",
      "})}"
    ]
  },
  "handle change": {
    "prefix": "handle-change",
    "body": [
      "const handle$1Change = (e: React.ChangeEventHandler<HTMLInputElement>) => {",
      "  set$1(e.target.value)",
      "}"
    ]
  },
  "useAppDispatch": {
    "prefix": "dispatch",
    "body": ["const dispatch = useAppDispatc$1"]
  }
}
