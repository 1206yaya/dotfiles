#!/bin/bash

export GITHUB_EMAIL=1206yaya@gmail.com
export GIT_CLONE_PATH=~/ghq/github.com/1206yaya
export DOTDIR="$GIT_CLONE_PATH/dotfiles"
export DOT_REPOURL="https://github.com/1206yaya/dotfiles.git"
###########################################################
# Options
###########################################################
verbose=
skip_apps=0
full_install=0
use_private=0
for i in "$@"; do
    case "$i" in
    -s | --skip-apps)
        skip_apps=1
        shift
        ;;
    -f | --full-install)
        full_install=1
        shift
        ;;
    -v | --verbose)
        verbose=1
        shift
        ;;
    --private)
        use_private=1
        shift
        ;;
    *)
        echo "Warning: Unknown option $i"
        echo "Usage: $0 [--skip-apps] [--verbose] [--unlink=package] [--private]"
        exit 1
        ;;
    esac
done

###########################################################
# Utils
###########################################################
log() { echo "üìå $1"; }
info() { printf '[ \033[00;34m  \033[0m ] %s\n' "$1"; }
file_exists() {
    path="$1"
    [ -f "$path" ]
}

dir_exists() {
    path="$1"
    [ -d "$path" ]
}

ensure_dir_exists() {
    path="$1"
    if ! dir_exists "$path"; then
        mkdir -p "$path"
    fi
}
press_to_continue() {
    info 'Press any key to continue'
    read -r
}
success() { printf '[ \033[00;32mOK\033[0m ] %s\n' "$1"; }

###########################################################
# Functions
###########################################################

install_xcode_command_line_tools() {
    if ! xcode-select -p >/dev/null 2>&1; then
        log 'Install Xcode Command Line Tools'
        xcode-select --install
    fi
}

clone_dotfiles() {
    if ! dir_exists "$DOTDIR"; then
        log "Clone dotfiles to $DOTDIR"
        ensure_dir_exists "$GIT_CLONE_PATH"
        cd "$GIT_CLONE_PATH"
        git clone $DOT_REPOURL $DOTDIR
    fi
}

setup_ssh() {
    mkdir -p "$HOME"/.ssh
    if [ ! -f "$HOME"/.ssh/id_ed25519.pub ]; then
        ssh-keygen -t ed25519 -C "$(git config user.email)" -f "$HOME"/.ssh/id_ed25519
        info 'Register your SSH public key on GitHub (Key Type: Authentication Key): https://github.com/settings/ssh/new'
        info 'Copy the public key below and add it to the "New SSH Key" page on GitHub, selecting "Authentication Key" as the Key Type.'
        cat "$HOME"/.ssh/id_ed25519.pub
        echo ''
        press_to_continue
    else
        success "SSH Key - Key-pair already present"
    fi
}
install_homebrew() {
    arch_name="$(uname -m)"
    if [ "${arch_name}" = "x86_64" ]; then
        if ! command -v brew >/dev/null 2>&1; then
            log 'Setup Homebrew'
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
        fi
    elif [ "${arch_name}" = "arm64" ]; then
        if ! command -v brew >/dev/null 2>&1; then
            log 'Setup Homebrew'
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            eval "$(/opt/homebrew/bin/brew shellenv)"

            log 'Install Rosetta 2'
            sudo softwareupdate --install-rosetta --agree-to-license
        fi
    fi
}

install_brewfile() {
    # skip_apps „Åå 1 „Å™„ÇâÂç≥„É™„Çø„Éº„É≥
    if [ "$skip_apps" -eq 1 ]; then
        return
    fi

    # `office.Brewfile` „ÅÆÈÅ©Áî®ÔºàÂøÖÈ†àÔºâ
    BREWFILE_OFFICE="$GIT_CLONE_PATH/dotfiles/office.Brewfile"
    if [ -f "$BREWFILE_OFFICE" ]; then
        info "Applying $BREWFILE_OFFICE..."
        brew bundle --file="$BREWFILE_OFFICE"
    else
        info "Error: $BREWFILE_OFFICE not found!"
        exit 1
    fi

    # `Brewfile.private` „ÇÇÈÅ©Áî®„Åô„ÇãÂ†¥Âêà
    if [ "$use_private" -eq 1 ]; then
        BREWFILE_PRIVATE="$GIT_CLONE_PATH/dotfiles/private.Brewfile"
        if [ -f "$BREWFILE_PRIVATE" ]; then
            info "Applying $BREWFILE_PRIVATE..."
            brew bundle --file="$BREWFILE_PRIVATE"
        else
            info "Warning: $BREWFILE_PRIVATE not found, skipping..."
        fi
    fi

    log 'Install Apps and CLIs'
}

setup_gpg() {
    # ~/.gnupg „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ„ÄÅ„Åæ„Åü„ÅØ GPG ÁßòÂØÜÈçµ„Åå„Å™„ÅÑÂ†¥Âêà„Å´ÂÆüË°å
    if ! dir_exists ~/.gnupg || [ -z "$(gpg --list-secret-keys --keyid-format LONG)" ]; then
        log 'Install gpg signing with git' # GPG ÁΩ≤Âêç„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÈñãÂßã

        # RSA4096 „Çí‰ΩøÁî®„Åó„Å¶Êñ∞„Åó„ÅÑ GPG Èçµ„Çí‰ΩúÊàê
        gpg --default-new-key-algo rsa4096 --gen-key

        # ‰ΩúÊàê„Åó„Åü GPG Èçµ„ÅÆ Key ID „ÇíÂèñÂæó
        key_id=$(gpg --list-secret-keys --keyid-format LONG | ggrep -oP "rsa4096\/[0-9a-fA-F]{16}" | cut -d"/" -f2)

        # GitHub „Å´ÁôªÈå≤„Åô„Çã„Åü„ÇÅ„ÅÆ GPG ÂÖ¨ÈñãÈçµ„ÇíË°®Á§∫„Åô„Çã„Çà„ÅÜÈÄöÁü•
        gpg --armor --export "$key_id"
        log 'Copy and paste the GPG key below to GitHub'
        info 'Register your GPG key on GitHub : https://github.com/settings/gpg/new'
        press_to_continue

        # ~/.gitconfig.local „Å´ GPG ÁΩ≤ÂêçÈçµ„ÅÆË®≠ÂÆö„ÇíËøΩÂä†
        git_local_config="$HOME/.gitconfig.local"

        if ! file_exists "$git_local_config"; then
            touch "$git_local_config"
        fi

        # Êó¢Â≠ò„ÅÆ signingkey Ë®≠ÂÆö„ÇíÂâäÈô§ÔºàÈáçË§áÈò≤Ê≠¢Ôºâ
        sed -i '' '/signingkey/d' "$git_local_config"

        # GPG ÁΩ≤Âêç„Ç≠„Éº„Çí ~/.gitconfig.local „Å´ËøΩÂä†
        echo "[user]" >>"$git_local_config"
        echo "    signingkey = $key_id" >>"$git_local_config"

        log "Added GPG signing key to ~/.gitconfig.local"
    fi
}

symlink_files() {
    local src_dir="$1"
    local dest_dir="$2"

    ensure_dir_exists "$dest_dir"

    # .venv „Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÈô§Â§ñ„Åó„Å¶ find „Åß„Éï„Ç°„Ç§„É´„Éª„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂèñÂæó
    find "$src_dir" -mindepth 1 ! -path "$src_dir/.venv*" -print | while IFS= read -r file; do
        local relative_path="${file#$src_dir/}"
        local target="$dest_dir/$relative_path"

        # .venv „ÅÆÈô§Â§ñÁ¢∫Ë™çÔºàÂøµ„ÅÆ„Åü„ÇÅÔºâ
        if [[ "$relative_path" == ".venv"* ]]; then
            continue
        fi

        # „Éá„Ç£„É¨„ÇØ„Éà„É™„Å™„Çâ‰ΩúÊàê„ÄÅ„Éï„Ç°„Ç§„É´„Å™„Çâ„Ç∑„É≥„Éú„É™„ÉÉ„ÇØ„É™„É≥„ÇØ„Çí‰ΩúÊàê
        if [[ -d "$file" ]]; then
            ensure_dir_exists "$target"
        else
            if [[ -e "$target" || -L "$target" ]]; then
                rm -f "$target"
            fi
            ln -s "$file" "$target"
            echo "Linked: $file -> $target"
        fi
    done
}

create_symbolic_links() {

    log 'Create Symbolic Links'
    # vscode > settings.json „Åßgo.goroot „ÇíÂèÇÁÖß„Åß„Åç„Çã„Çà„ÅÜ„Å´
    # settings.json > "go.goroot": "/usr/local/go",„ÄÄ„ÇíËøΩÂä†
    sudo ln -s $(go env GOROOT) /usr/local/go

    # bin
    ensure_dir_exists "$HOME/bin"
    symlink_files "$DOTDIR/bin" "$HOME/bin"

    # git
    ln -sf "$DOTDIR/git/.gitconfig" "$HOME/.gitconfig"
    ln -sf "$DOTDIR/git/.gitignore_global" "$HOME/.gitignore_global"
    ln -sf "$DOTDIR/git/.gitconig.local" "$HOME/.gitconig.local"

    # zsh
    ln -sf "$DOTDIR/zsh/.zshrc" "$HOME/.zshrc"
    ln -sf "$DOTDIR/zsh/.zshenv" "$HOME/.zshenv"
    mkdir -p "$HOME/.config/zsh"

    symlink_files "$DOTDIR/zsh/.config/aliases" "$HOME/.config/zsh/aliases"
    symlink_files "$DOTDIR/zsh/.config/functions" "$HOME/.config/zsh/functions"
    symlink_files "$DOTDIR/zsh/.config/makefile" "$HOME/.config/makefile"

    # vscode
    ln -sf "$DOTDIR/vscode/settings.json" "$HOME/Library/Application Support/Code/User/settings.json"
    ln -sf "$DOTDIR/vscode/keybindings.json" "$HOME/Library/Application Support/Code/User/keybindings.json"
    symlink_files "$DOTDIR/vscode/snippets" "$HOME/Library/Application Support/Code/User/snippets"

    # cursor
    ln -sf "$DOTDIR/vscode/settings.json" "$HOME/Library/Application Support/Cursor/User/settings.json"
    ln -sf "$DOTDIR/vscode/keybindings.json" "$HOME/Library/Application Support/Cursor/User/keybindings.json"
    symlink_files "$DOTDIR/vscode/snippets" "$HOME/Library/Application Support/Cursor/User/snippets"

    # karabiner
    ensure_dir_exists "$HOME/.config/karabiner"
    ln -sf "$DOTDIR/karabiner/karabiner.edn" "$HOME/.config/karabiner/karabiner.edn"
    # goku„ÄÄ„Åß„Ç®„É©„Éº„ÅåÂá∫„Çã„Åì„Å®„Åå„ÅÇ„Çã„Åü„ÇÅ„ÄÅÂøµ„ÅÆÁÇ∫„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
    touch "$HOME/.config/karabiner/karabiner.json"
    # starship
    ln -sf "$DOTDIR/.config/starship.toml" "$HOME/.config/starship.toml"

    # atuin
    ln -sf "$DOTDIR/atuin/config.toml" "$HOME/.config/atuin/config.toml"

    # hammerspoon
    symlink_files "$DOTDIR/hammerspoon" "$HOME/.config/hammerspoon"

    # alacritty
    ensure_dir_exists "$HOME/.config/alacritty/themes"
    ln -sf "$DOTDIR/alacritty/alacritty.toml" "$HOME/.config/alacritty/alacritty.toml"
    symlink_files "$DOTDIR/alacritty/themes" "$HOME/.config/alacritty/themes"

    # tmux
    symlink_files "$DOTDIR/tmux" "$HOME/.config/tmux"

    # mise
    ln -sf "$DOTDIR/.mise.toml" "$HOME/.mise.toml"
}

set_macos() {
    # skip_apps „Åå 1 „Å™„ÇâÂç≥„É™„Çø„Éº„É≥
    if [ "$skip_apps" -eq 1 ]; then
        return
    fi
    # configure macOS settings
    ensure_dir_exists ~/screenshots
    . "$DOTDIR/macos/defaults.sh"
}

check_list() {
    if [ "$full_install" -eq 0 ]; then
        return
    fi
    echo "Open tmux and run the following command to check the color scheme."
    echo "curl -LO https://github.com/alacritty/alacritty/raw/master/extra/alacritty.info"
}

install_mise() {
    if [ "$skip_apps" -eq 1 ]; then
        return
    fi
    mise trust "$DOTDIR/.mise.toml"
    mise install

    mise list | tail -n +2 | while read -r tool version _; do
        mise global "$tool@$version"
    done

    poetry config virtualenvs.in-project true
}

set_alacritty_theme() {
    ensure_dir_exists "$HOME/.config/alacritty/themes"
}

install_xcode_command_line_tools
clone_dotfiles
setup_ssh
install_homebrew
install_brewfile
setup_gpg
install_mise
create_symbolic_links
set_macos
check_list
